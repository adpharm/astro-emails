---
import { twMerge } from "tailwind-merge";
import {
  findTailwindClassForCssProperty,
  findValueInPxForCssProperty,
  findUrlForCssProperty,
  findValueForCssProperty,
  findBorderValueForCssProperty,
  calcPx,
} from "@/utils/utils";
import IfOutlook from "./IfOutlook.astro";
import IfNotOutlook from "./IfNotOutlook.astro";
import tailwindConfig from "tailwind.config";
import resolveConfig from "tailwindcss/resolveConfig";

const tailwindConfigResolved = resolveConfig(tailwindConfig);

// Much of the outlook stuff was taken from https://buttons.cm/

interface Props {
  class?: string;
  href?: string;
}

let { class: className = "", href = "#" } = Astro.props;

const [widthClass, classWithoutWidth] = findTailwindClassForCssProperty("width", className);
className = classWithoutWidth;

const [marginClass, classWithoutMargin] = findTailwindClassForCssProperty("margin", className);
className = classWithoutMargin;

const [bgImageClass, classWithoutBgImage] = findTailwindClassForCssProperty("background-image", className);
const bgImageUrl = findUrlForCssProperty("background-image", className);
className = classWithoutBgImage;

const [bgColorClass, classWithoutBgColor] = findTailwindClassForCssProperty("background-color", className);
const bgColor = findValueForCssProperty("background-color", className);
className = classWithoutBgColor;

const [borderClass, classWithoutBorder] = findTailwindClassForCssProperty("border", className);
const [borderTopClass, classWithoutBorderTop] = findTailwindClassForCssProperty("border-top", className);
const [borderBottomClass, classWithoutBorderBottom] = findTailwindClassForCssProperty("border-bottom", className);
const [borderLeftClass, classWithoutBorderLeft] = findTailwindClassForCssProperty("border-left", className);
const [borderRightClass, classWithoutBorderRight] = findTailwindClassForCssProperty("border-right", className);
const { color: borderColor } = findBorderValueForCssProperty("border", className);
className = classWithoutBorder;
className = classWithoutBorderTop;
className = classWithoutBorderBottom;
className = classWithoutBorderLeft;
className = classWithoutBorderRight;

const [fontSizeClass, classWithoutFontSize] = findTailwindClassForCssProperty("font-size", className);
const fontSizePx =
  findValueInPxForCssProperty("font-size", className) || calcPx(tailwindConfigResolved.theme.fontSize.base);
className = classWithoutFontSize;

const paddingTop = findValueInPxForCssProperty("padding-top", className) || 0;
const paddingBottom = findValueInPxForCssProperty("padding-bottom", className) || 0;

const [heightClass, classWithoutHeight] = findTailwindClassForCssProperty("height", className);
const heightPx = findValueInPxForCssProperty("height", className) || fontSizePx + paddingTop + paddingBottom;
className = classWithoutHeight;

const [borderRadiusClass, classWithoutBorderRadius] = findTailwindClassForCssProperty("border-radius", className);
const borderRadiusPx = findValueInPxForCssProperty("border-radius", className) || 0;
className = classWithoutBorderRadius;

const vRoundRectAttrs: Record<string, string> = {};

// fill
if (bgImageUrl) {
  vRoundRectAttrs.fill = "t";
} else if (bgColor) {
  vRoundRectAttrs.fillcolor = bgColor;
}

// stroke color
if (borderColor) {
  vRoundRectAttrs.strokecolor = borderColor;
} else {
  vRoundRectAttrs.stroke = "f";
}

// arcsize (border-radius)
vRoundRectAttrs.arcsize = (borderRadiusPx / heightPx) * 100 + "%";
---

<table class={twMerge(widthClass, marginClass)}>
  <tbody>
    <tr>
      <td>
        <table class={twMerge(widthClass)}>
          <tbody>
            <tr>
              <td>
                {/* Outlook */}
                <IfOutlook>
                  <v:roundrect
                    xmlns:v="urn:schemas-microsoft-com:vml"
                    xmlns:w="urn:schemas-microsoft-com:office:word"
                    href={href}
                    style="v-text-anchor:middle;"
                    class={twMerge(widthClass, heightClass)}
                    {...vRoundRectAttrs}
                  >
                    {bgImageUrl && <v:fill type="tile" src={bgImageUrl} color={bgColor} />}
                    <w:anchorlock></w:anchorlock>
                    <center class={twMerge(className, fontSizeClass)}>
                      <slot />
                    </center>
                  </v:roundrect>
                </IfOutlook>

                {/* Not Outlook */}
                <IfNotOutlook>
                  <a
                    href={href}
                    class={twMerge(
                      "inline-block",
                      className,
                      widthClass,
                      heightClass,
                      bgImageClass,
                      bgColorClass,
                      borderRadiusClass
                    )}
                  >
                    <slot />
                  </a>
                </IfNotOutlook>
              </td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
  </tbody>
</table>
